---
title: "Analysis of Covert attention session - Targets placed horizontally"
format:
  html:
    code-fold: true
    page-layout: full
jupyter: python3
---


```{python}
import os 
import glob
import json
RootAnalysisFolder = os.path.split(os.path.split(os.getcwd())[0])[0]
import pandas as pd

import mne
import numpy as np
import matplotlib.pyplot as plt
plt.rcParams['figure.figsize']=(15,8)
plt.rcParams["figure.dpi"] = 300.
import sys
sys.path.append(RootAnalysisFolder)


from AddPyABA_Path import PyABA_path
sys.path.append(PyABA_path)
import gaze_tools,py_tools

from CovertAttention_fun import CovertAttention
```

*fif file name definition

```{python}

RootFolder =  os.path.split(RootAnalysisFolder)[0]

RootDirectory_RAW = RootFolder + '/_data/FIF/'
RootDirectory_Results = RootFolder + '/_results/'
FifFileName = RootDirectory_RAW + "***SUJ***/***SUJ***_VisAtt_Horiz.raw.fif"

SUBJECT_NAME = os.path.split(os.path.split(FifFileName)[0])[1]
FlagProcessAnalysis = os.path.isfile(FifFileName)
FlagET = False

```


Read Raw File

```{python}

# Read fif filename 
if FlagProcessAnalysis :
	CovertAtt_Horiz = CovertAttention()
	DictEvent_Horiz = { 'StdLeft/AttLeft'   : 1 , 'DevLeft/AttLeft'   : 2 ,
		                  'StdRight/AttLeft'  : 3 , 'DevRight/AttLeft'  : 4 , 
		                  'StdLeft/AttRight'  : 11, 'DevLeft/AttRight'  : 12,
		                  'StdRight/AttRight' : 13, 'DevRight/AttRight' : 14,
		                  'Instruct/AttLeft'  : 9 , 'Instruct/AttRight' : 10 }
			
	mne_rawHorizCovAtt = CovertAtt_Horiz.ReadFileandConvertEvent(FifFileName, DictEvent_Horiz)
	FlagET = 'Gaze_LEye_X' in mne_rawHorizCovAtt.info['ch_names']
	
	if FlagET:
		Gaze_LEye_X,Gaze_LEye_Y,Gaze_REye_X,Gaze_REye_Y,AttSide = CovertAtt_Horiz.SetGazeData(mne_rawHorizCovAtt)
	else:
		print("  ****************         NO DATA          ****************")
	
else:
	print("  ****************         NO DATA          ****************")
```

## Plot Gaze Position
### Left Eye
```{python}
if FlagET :
	fig_Leye,Perct_FixCross_Leye = CovertAtt_Horiz.PlotGazeFixation(Gaze_LEye_X,Gaze_LEye_Y,AttSide)
	fig_Leye.suptitle('Horizontal -  Left Eye Gaze Fixation')
else:
	print("  ****************         NO DATA          ****************")
```
### Right Eye
```{python}

if FlagET :
	fig_Reye,Perct_FixCross_Reye = CovertAtt_Horiz.PlotGazeFixation(Gaze_REye_X,Gaze_REye_Y,AttSide)
	fig_Reye.suptitle('Horizontal -  Right Eye Gaze Fixation')
else:
	print("  ****************         NO DATA          ****************")
```

## Cross fixation accuracy
```{python}
if FlagET :
	Mean_LE_XFix = np.nanmean(Perct_FixCross_Leye)
	Mean_RE_XFix = np.nanmean(Perct_FixCross_Reye)

	Std_LE_XFix = np.nanstd(Perct_FixCross_Leye)
	Std_RE_XFix = np.nanstd(Perct_FixCross_Reye)
	
	print("Left Eye = " + f"{Mean_LE_XFix:.2f}" + ' ' + u"\u00B1" + ' ' + f"{Std_LE_XFix:.2f}" + " %")
	print("Right Eye = " + f"{Mean_RE_XFix:.2f}" + ' ' + u"\u00B1" + ' ' + f"{Std_RE_XFix:.2f}" + " %")
else:
	print("  ****************         NO DATA          ****************")
```
## Saccades
### Plot and detect
```{python}
if FlagET :
	NbSaccades_LEye,NbSaccades_REye = CovertAtt_Horiz.PlotSaccade(Gaze_LEye_X,Gaze_LEye_Y,Gaze_REye_X,Gaze_REye_Y,mne_rawHorizCovAtt.info['sfreq'],AttSide,'Hori')
else:
	print("  ****************         NO DATA          ****************")
```
### Number of saccades
```{python}
if FlagET :
	Mean_LE_Sacc = np.nanmean(NbSaccades_LEye)
	Mean_RE_Sacc = np.nanmean(NbSaccades_REye)
	
	Std_LE_Sacc = np.nanstd(NbSaccades_LEye)
	Std_RE_Sacc = np.nanstd(NbSaccades_REye)
	
	print("Left Eye = " + f"{Mean_LE_Sacc:.2f}" + ' ' + u"\u00B1" + ' ' + f"{Std_LE_Sacc:.2f}" + " saccades")
	print("Right Eye = " + f"{Mean_RE_Sacc:.2f}" + ' ' + u"\u00B1" + ' ' + f"{Std_RE_Sacc:.2f}" + " saccades")
else:
	print("  ****************         NO DATA          ****************")
```

## Attentional components
### Standards
```{python}
if FlagProcessAnalysis :
	figStd,EpochStd = CovertAtt_Horiz.CompareStimUnderCond(mne_rawHorizCovAtt,'Std',[1,1],'Standards',None)
else:
	print("  ****************         NO DATA          ****************")
```

### Deviants
```{python}
if FlagProcessAnalysis :
	figDev,EpochDev = CovertAtt_Horiz.CompareStimUnderCond(mne_rawHorizCovAtt,'Dev',[2.5,2.5],'Deviants',None)
else:
	print("  ****************         NO DATA          ****************")
```


### Compute the P300 Effect: compare Dev ERPs at Cz & Pz under Attended and Ignored condition
```{python}
if FlagProcessAnalysis :
		figDevAttVsIgn,P300Effect_OK = CovertAtt_Horiz.Compare_Stim_2Cond_ROI(EpochDev, ["crimson","steelblue"],[2.5,2.5],[0.25,0.8], ['Cz','Pz'],0.05)
else:
	print("  ****************         NO DATA          ****************")
```


## Behavior & Features
```{python}

if FlagProcessAnalysis :
	Behav_Acc_Horiz,TabNbStimPerBlock_Horiz,figFeatures_Horiz,Features_Horiz,nb_spatial_filters,NbPtsEpoch= CovertAtt_Horiz.ComputeFeatures(mne_rawHorizCovAtt)

	print('Behavior Accuracy = ' +  f"{Behav_Acc_Horiz*100:.2f}" + ' %')
else:
	print("  ****************         NO DATA          ****************")
```

## Decoding
### Cross validation with one Xdawn Training
```{python}
if FlagProcessAnalysis :
	accuracy_stds_devs,accuracy_stds,accuracy_devs,accuracy_Left,accuracy_Right = CovertAtt_Horiz.ClassicCrossValidation(Features_Horiz,nb_spatial_filters,NbPtsEpoch)
	XValid_Acc_1TrainXdawn = {"All":accuracy_stds_devs,"Std":accuracy_stds,"Dev":accuracy_devs,"Left":accuracy_Left,"Right":accuracy_Right}
	print("   *********** Classic X-Validation ")
	print("           Accuracy all stim :  " ,  "{:.2f}".format(accuracy_stds_devs))
	print("   ***********   ")
	print("     Accuracy Std Only       :  " ,  "{:.2f}".format(accuracy_stds))
	print("     Accuracy Dev Only       :  " ,  "{:.2f}".format(accuracy_devs))
	print("     Accuracy Stim Left Only   :  " ,  "{:.2f}".format(accuracy_Left))
	print("     Accuracy Stim Right Only  :  " , "{:.2f}".format(accuracy_Right))	
else:
	print("  ****************         NO DATA          ****************")	
```
### Cross validation with Xdawn retraining for each training dataset
```{python}
if FlagProcessAnalysis :
	accuracy_stds_devs,accuracy_stds,accuracy_devs,accuracy_Left,accuracy_Right = CovertAtt_Horiz.ComputeAccuracy(mne_rawHorizCovAtt,TabNbStimPerBlock_Horiz)
	XValid_Acc_ReTrainXdawn = {"All":accuracy_stds_devs,"Std":accuracy_stds,"Dev":accuracy_devs,"Left":accuracy_Left,"Right":accuracy_Right}
	print("   *********** X-Validation with retrained Xdawn ")
	print("           Accuracy all stim :  " ,  "{:.2f}".format(accuracy_stds_devs))
	print("   ***********   ")
	print("     Accuracy Std Only       :  " ,  "{:.2f}".format(accuracy_stds))
	print("     Accuracy Dev Only       :  " ,  "{:.2f}".format(accuracy_devs))
	print("     Accuracy Stim Left Only   :  " ,  "{:.2f}".format(accuracy_Left))
	print("     Accuracy Stim RightOnly  :  " , "{:.2f}".format(accuracy_Right))

else:
	print("  ****************         NO DATA          ****************")
```







## Independant Components fitted in Attended condition
### Standards
```{python}
if FlagProcessAnalysis :
	Events_Horiz, _ = mne.events_from_annotations(mne_rawHorizCovAtt,verbose='ERROR')
	fig_CompareCond_IC_Std_Horiz = CovertAtt_Horiz.CompareCondFromIcaCompo(mne_rawHorizCovAtt,Events_Horiz,['eeg'],-0.1,1.0,0.15,'Std',[1,1],'Standards',2000,0.15,None)
else:
	print("  ****************         NO DATA          ****************")
```

### Deviants
```{python}
if FlagProcessAnalysis :
	Events_Horiz, _ = mne.events_from_annotations(mne_rawHorizCovAtt,verbose='ERROR')
	fig_CompareCond_IC_Dev_Horiz = CovertAtt_Horiz.CompareCondFromIcaCompo(mne_rawHorizCovAtt,Events_Horiz,['eeg'],-0.1,1.0,0.15,'Dev',[2.5,2.5],'Deviants',2000,0.15,None)
else:
	print("  ****************         NO DATA          ****************")
```





## Horizontal EOG Attended vs Ignored
### Standards
```{python}
if FlagProcessAnalysis :
	CovertAtt_Horiz.plotEOGCompareAttIgn(mne_rawHorizCovAtt,['EOGLef','EOGRig'],'Horiz',-0.1,0.6,'Std',0.05,None)
else:
	print("  ****************         NO DATA          ****************")
```

### Deviants
```{python}
if FlagProcessAnalysis :
	CovertAtt_Horiz.plotEOGCompareAttIgn(mne_rawHorizCovAtt,['EOGLef','EOGRig'],'Horiz',-0.1,0.6,'Dev',0.05,None)
else:
	print("  ****************         NO DATA          ****************")
```


## Vertical EOG (Fp1 & Fp2)  Attended vs Ignored
### Standards
```{python}
if FlagProcessAnalysis :
	CovertAtt_Horiz.plotEOGCompareAttIgn (mne_rawHorizCovAtt,['Fp1','Fp2'],'Verti',-0.1,0.6,'Std',0.05,None)
else:
	print("  ****************         NO DATA          ****************")
```

### Deviants
```{python}
if FlagProcessAnalysis :
	CovertAtt_Horiz.plotEOGCompareAttIgn (mne_rawHorizCovAtt,['Fp1','Fp2'],'Verti',-0.1,0.6,'Dev',0.05,None)
else:
	print("  ****************         NO DATA          ****************")
```



## Gaze position Attended vs Ignored
### Left Eye
#### Standards
```{python}
if FlagET :
	CovertAtt_Horiz.plotGazeCompareAttIgn (mne_rawHorizCovAtt,['Gaze_LEye_X','Gaze_LEye_Y'],-0.1,0.6,'Std',0.05,None)
else:
	print("  ****************         NO DATA          ****************")
```

#### Deviants
```{python}
if FlagET :
	CovertAtt_Horiz.plotGazeCompareAttIgn(mne_rawHorizCovAtt,['Gaze_LEye_X','Gaze_LEye_Y'],-0.1,0.6,'Dev',0.05,None)
else:
	print("  ****************         NO DATA          ****************")
```


### Right Eye
#### Standards
```{python}
if FlagET :
	CovertAtt_Horiz.plotGazeCompareAttIgn(mne_rawHorizCovAtt,['Gaze_REye_X','Gaze_REye_Y'],-0.1,0.6,'Std',0.05,None)
else:
	print("  ****************         NO DATA          ****************")
```

#### Deviants
```{python}
if FlagET :
	CovertAtt_Horiz.plotGazeCompareAttIgn(mne_rawHorizCovAtt,['Gaze_REye_X','Gaze_REye_Y'],-0.1,0.6,'Dev',0.05,None)
else:
	print("  ****************         NO DATA          ****************")
```



## Spectral analysis of gaze position for each trial
```{python}
if FlagET :
	figSpectGaze,Results_SpectGaze = CovertAtt_Horiz.GazeSpectralAnalysis(mne_rawHorizCovAtt,['Gaze_LEye_X','Gaze_LEye_Y','Gaze_REye_X','Gaze_REye_Y'],0.25,15,0.1)
else:
	print("  ****************         NO DATA          ****************")
```


## Spectral analysis of Vertical EOG for each trial
```{python}
if FlagProcessAnalysis :
	figSpectVertiEOG,Results_SpectVertiEOG = CovertAtt_Horiz.EOGSpectralAnalysis(mne_rawHorizCovAtt,['Fp1','Fp2'],0.25,15,0.1,'Verti')
else:
	print("  ****************         NO DATA          ****************")
```

## Spectral analysis of Horizontal EOG for each trial
```{python}
if FlagProcessAnalysis :
	figSpectHorizEOG,Results_SpectHorizEOG = CovertAtt_Horiz.EOGSpectralAnalysis(mne_rawHorizCovAtt,['EOGLef','EOGRig'],0.25,15,0.1,'Horiz')
else:
	print("  ****************         NO DATA          ****************")
```



## Pupil diameter in Attended condition, Deviants vs Standards
```{python}
if FlagET :
	CovertAtt_Horiz.plotDiamPupillCompareStdDevAtt(mne_rawHorizCovAtt,['PupDi_LEye','PupDi_REye'],-0.1,0.6,0.05,None)
else:
	print("  ****************         NO DATA          ****************")
```


```{python}
if FlagProcessAnalysis :
	# Save results computed from gaze data in a *json file
	if not(os.path.exists(RootDirectory_Results + SUBJECT_NAME)):
		os.mkdir(RootDirectory_Results + SUBJECT_NAME)
	SaveDataFilename = RootDirectory_Results + SUBJECT_NAME + "/" + SUBJECT_NAME + "_Cov_Att_Horiz.json"
	
	if FlagET:
		Results = {"PercentFix_LeftEye" : Mean_LE_XFix,"PercentFix_RightEye" : Mean_RE_XFix,"NumberOfSaccades_LeftEye" : Mean_LE_Sacc,"NumberOfSaccades_RightEye" : Mean_RE_Sacc,"P300Effect":P300Effect_OK}
	else:
		Results = {"P300Effect":P300Effect_OK}
	

	with open(SaveDataFilename, "w") as outfile: 
		   json.dump(Results, outfile)
		   
	py_tools.append_to_json_file(SaveDataFilename, {'CrossVal_1TrainXdawn':XValid_Acc_1TrainXdawn,'CrossVal_ReTrainXdawn':XValid_Acc_ReTrainXdawn})	 
	if FlagET:
		py_tools.append_to_json_file(SaveDataFilename,  Results_SpectGaze)
	py_tools.append_to_json_file(SaveDataFilename,  Results_SpectVertiEOG)
	py_tools.append_to_json_file(SaveDataFilename,  Results_SpectHorizEOG)
	py_tools.append_to_json_file(SaveDataFilename,  {'Behavior Accuracy':Behav_Acc_Horiz}) 

```








