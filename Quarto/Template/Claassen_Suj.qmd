---
title: "Analysis of Claassen's paradigm session"
format:
  html:
    code-fold: true
    page-layout: full
jupyter: python3
---


```{python}
import os 
import glob
RootAnalysisFolder = os.path.split(os.path.split(os.getcwd())[0])[0]

import json

import mne
import matplotlib.pyplot as plt
plt.rcParams['figure.figsize']=(15,8)
plt.rcParams["figure.dpi"] = 300.
import sys
sys.path.append(RootAnalysisFolder)
from Claassen_fun import Claassen
```


*fif file name definition

```{python}

RootFolder =  os.path.split(RootAnalysisFolder)[0]

RootDirectory_RAW = RootFolder + '/_data/FIF/'
RootDirectory_Results = RootFolder + '/_results/'
FifFileName = RootDirectory_RAW + "***SUJ***\***SUJ***_Claassen.raw.fif"

SUBJECT_NAME = os.path.split(os.path.split(FifFileName)[0])[1]

```


Read Raw File and compute Power spectrum for each blocks in 2 conditions : Move and Rest

```{python}

# Read fif filename 
raw_Claassen = Claassen(FifFileName)

# Compute csd for each block 
rejection_rate = 0.1

Epoch4SVM = raw_Claassen.SetEpoch_csd(rejection_rate=rejection_rate)

# Compute power spectrum of each csd data
PSD_epoch_data = raw_Claassen.Compute_psdEpoch(Epoch4SVM)	
```

## Decoding performance over time

```{python}
fig_Predict = raw_Claassen.ComputePlot_LOOCV(Epoch4SVM,PSD_epoch_data)	
```


## Cross-validated AUC scores
```{python}
fig_AUC, AUC_data = raw_Claassen.Compute_AUC(Epoch4SVM,PSD_epoch_data)
```
## Scores

```{python}
print("Mean AUC: ",AUC_data['AUC_mean'])
print("p-value: ",AUC_data['p_value'])

```



## ERDS Analysis
```{python}
fig_ERDS = raw_Claassen.ERDS_Analysis(rejection_rate=rejection_rate)
```

## Analysis of Heart Rate variation during the 'Move' and 'Rest' Conditions
```{python}
figHR_Mvt = raw_Claassen.HeartRate_analysis()
```

## Analysis of Pupil Diameter variation during the 'Move' and 'Rest' Conditions
```{python}
figPupil = raw_Claassen.PupilDiam_analysis()
```



# Save results computed from gaze data in a *json file
```{python}
if not(os.path.exists(RootDirectory_Results + SUBJECT_NAME)):
	os.mkdir(RootDirectory_Results + SUBJECT_NAME)
SaveDataFilename = RootDirectory_Results + SUBJECT_NAME + "/" + SUBJECT_NAME + "_Claassen.json"
Results = {"Mean_AUC" : AUC_data['AUC_mean'], "p_value" : AUC_data['p_value']}

with open(SaveDataFilename, "w") as outfile: 
	   json.dump(Results, outfile)
	   
```
