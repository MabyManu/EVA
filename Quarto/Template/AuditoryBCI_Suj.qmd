---
title: "Analysis of Auditory BCI session"
format:
  html:
    code-fold: true
    page-layout: full
jupyter: python3
---


```{python}
import os 
import glob
import json

RootAnalysisFolder = os.path.split(os.path.split(os.getcwd())[0])[0]

import mne
import matplotlib.pyplot as plt
plt.rcParams['figure.figsize']=(15,8)
plt.rcParams["figure.dpi"] = 300.
import sys
sys.path.append(RootAnalysisFolder)


from AddPyABA_Path import PyABA_path
sys.path.append(PyABA_path)
import gaze_tools,py_tools

from AuditoryBCI_fun import AudBCI
```


*fif file name definition

```{python}

RootFolder =  os.path.split(RootAnalysisFolder)[0]

RootDirectory_RAW = RootFolder + '/_data/FIF/'
RootDirectory_Results = RootFolder + '/_results/'
FifFileName = RootDirectory_RAW + "***SUJ***/***SUJ***_Aud_BCI.raw.fif"

SUBJECT_NAME = os.path.split(os.path.split(FifFileName)[0])[1]

```


Read Raw File

```{python}

# Read fif filename 
raw_AudBCI = AudBCI(FifFileName)

```


## Plot Gaze during each block
```{python}
figGaze = raw_AudBCI.GazeAnalysis()
```

## Compare STD responses in Attented versus Ignored conditions
```{python}
figStd,EpochStd = raw_AudBCI.CompareStimUnderCond('Std',[1,1],'Standards')
```
## Compare DEV responses in Attented versus Ignored conditions
```{python}
figDev,EpochDev = raw_AudBCI.CompareStimUnderCond('Dev',[2.5,2.5],'Deviants')
```

## Compute the P300 Effect : compare DEV ERPs computed within the Region of Interest (ROI) consisting of  Cz and Pz electrodes under the Attented and Ignored Condition
```{python}
figDevAttVsIgn,P300Effect_OK = raw_AudBCI.Compare_Stim_2Cond_ROI(EpochDev, ["crimson","steelblue"],[2.5,2.5],[0.25,0.8], ['Cz','Pz'],0.05)

if P300Effect_OK:
	print("\033[92m {}\033[00m" .format(" P300 EFFECT"))
else:
	print("\033[91m {}\033[00m" .format("NO P300 EFFECT"))

```
## Compute Virtual Channels from XDAWN algorithm for STD and DEV responses under Attended vs Ignored conditions 
```{python}
Behav_Acc,TabNbStimPerBlock,fig= raw_AudBCI.ComputeFeatures()

print("Behavioral accuracy :" + str(Behav_Acc * 100) + ' %') 
```

## Compute Leave-One-Out Cross-Validation with a single training of Xdawn filters
```{python}
accuracy_stds_devs,accuracy_stds,accuracy_devs,accuracy_No,accuracy_Yes = raw_AudBCI.ClassicCrossValidation(TabNbStimPerBlock)
XValid_Acc_1TrainXdawn = {"All":accuracy_stds_devs,"Std":accuracy_stds,"Dev":accuracy_devs,"No":accuracy_No,"Yes":accuracy_Yes}

print("   *********** Classic X-Validation ")
print("           Accuracy all stim :  " ,  "{:.2f}".format(accuracy_stds_devs))
print("   ***********   ")
print("     Accuracy Std Only       :  " ,  "{:.2f}".format(accuracy_stds))
print("     Accuracy Dev Only       :  " ,  "{:.2f}".format(accuracy_devs))
print("     Accuracy No Stim Only   :  " ,  "{:.2f}".format(accuracy_No))
print("     Accuracy Yes Stim Only  :  " , "{:.2f}".format(accuracy_Yes))
```

## Compute Leave-One-Out Cross-Validation with a training of Xdawn filters for each training dataset
```{python}
accuracy_stds_devs,accuracy_stds,accuracy_devs,accuracy_No,accuracy_Yes = raw_AudBCI.ComputeAccuracy(TabNbStimPerBlock)
XValid_Acc_ReTrainXdawn = {"All":accuracy_stds_devs,"Std":accuracy_stds,"Dev":accuracy_devs,"No":accuracy_No,"Yes":accuracy_Yes}

print("   *********** X-Validation with retrained Xdawn ")
print("           Accuracy all stim :  " ,  "{:.2f}".format(accuracy_stds_devs))
print("   ***********   ")
print("     Accuracy Std Only       :  " ,  "{:.2f}".format(accuracy_stds))
print("     Accuracy Dev Only       :  " ,  "{:.2f}".format(accuracy_devs))
print("     Accuracy No Stim Only   :  " ,  "{:.2f}".format(accuracy_No))
print("     Accuracy Yes Stim Only  :  " , "{:.2f}".format(accuracy_Yes))
```


# Compute the synchronization between the respiration and the auditive stimuli
```{python}
Events, Events_dict = mne.events_from_annotations(raw_AudBCI.mne_raw,verbose='ERROR')
raw_AudBCI.RespirationSynchrony(raw_AudBCI.mne_raw,'Resp',[Events_dict['DevNo/AttNo'],Events_dict['DevYes/AttYes'],Events_dict['DevNo/AttYes'],Events_dict['DevYes/AttNo'],Events_dict['StdNo/AttNo'],Events_dict['StdYes/AttYes'],Events_dict['StdNo/AttYes'],Events_dict['StdYes/AttNo']])


```


# Spectral analysis of Vertical EOG for each trial
```{python}
figSpectVertiEOG,Results_SpectVertiEOG = raw_AudBCI.EOGSpectralAnalysis(raw_AudBCI.mne_raw,['Fp1','Fp2'],0.25,15,0.1,'Verti')
```

# Spectral analysis of Horizontal EOG for each trial
```{python}
figSpectHorizEOG,Results_SpectHorizEOG = raw_AudBCI.EOGSpectralAnalysis(raw_AudBCI.mne_raw,['EOGLef','EOGRig'],0.25,15,0.1,'Horiz')
```



# Save results computed from gaze data in a *json file
```{python}
if not(os.path.exists(RootDirectory_Results + SUBJECT_NAME)):
	os.mkdir(RootDirectory_Results + SUBJECT_NAME)
SaveDataFilename = RootDirectory_Results + SUBJECT_NAME + "/" + SUBJECT_NAME + "_AuditoryBCI.json"
Results = {"P300Effect" : P300Effect_OK}

with open(SaveDataFilename, "w") as outfile: 
	   json.dump(Results, outfile)
	   
py_tools.append_to_json_file(SaveDataFilename, {'CrossVal_1TrainXdawn':XValid_Acc_1TrainXdawn,'CrossVal_ReTrainXdawn':XValid_Acc_ReTrainXdawn})	 
py_tools.append_to_json_file(SaveDataFilename,  Results_SpectVertiEOG)
py_tools.append_to_json_file(SaveDataFilename,  Results_SpectHorizEOG) 
py_tools.append_to_json_file(SaveDataFilename,  {'Behavior Accuracy':Behav_Acc}) 
```

