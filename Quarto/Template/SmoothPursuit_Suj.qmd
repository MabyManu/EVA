---
title: "Analysis of Smooth Pursuit session"
format:
  html:
    code-fold: true
    page-layout: full
jupyter: python3
---



```{python}
import os 
import glob
RootAnalysisFolder = os.path.split(os.path.split(os.getcwd())[0])[0]
import numpy as np
import mne
import matplotlib.pyplot as plt
plt.rcParams['figure.figsize']=(15,8)
plt.rcParams["figure.dpi"] = 300.
import sys
sys.path.append(RootAnalysisFolder)
from SmoothPursuit_fun import SmoothPursuit

from AddPyABA_Path import PyABA_path
sys.path.append(PyABA_path)
import gaze_tools,py_tools
```


*fif file name definition

```{python}

RootFolder =  os.path.split(RootAnalysisFolder)[0]

RootDirectory_RAW = RootFolder + '/_data/FIF/'
RootDirectory_Results = RootFolder + '/_results/'
FifFileName = RootDirectory_RAW + "***SUJ***/***SUJ***_SmoothPursuit.raw.fif"

SUBJECT_NAME = os.path.split(os.path.split(FifFileName)[0])[1]
FlagProcessAnalysis = os.path.isfile(FifFileName)

```


Read Raw File

```{python}

if FlagProcessAnalysis :
	# Read fif filename and convert in raw object
	raw_SmoothPurs = SmoothPursuit(FifFileName)
	FlagET = 'Gaze_LEye_X' in raw_SmoothPurs.mne_raw.info['ch_names']
	FlagProcessAnalysis = FlagET

	if FlagET:
		GazeLE_X, GazeRE_X,GazeLE_Y,GazeRE_Y = raw_SmoothPurs.SetDataGaze()
	else:
		print("  ****************         NO DATA          ****************")		
else:
	print("  ****************         NO DATA          ****************")
```


## Plot the gaze  and the theorical Target trajectories

```{python}
if FlagProcessAnalysis :
	raw_SmoothPurs.Plot_SmootPurs_Traject(GazeLE_X, GazeRE_X,GazeLE_Y,GazeRE_Y)
else:
	print("  ****************         NO DATA          ****************")
```



## Detect saccades and plot gaze trajectory with saccade
```{python}
if FlagProcessAnalysis :
	EsacLeft,NbSaccades_Left,EsacRight,NbSaccades_Right,AmpSaccLeft,AmpSaccRight = raw_SmoothPurs.DetectSaccades_andPlot(GazeLE_X, GazeRE_X,GazeLE_Y,GazeRE_Y)
else:
	print("  ****************         NO DATA          ****************")
```
		


## Compute Velocity and all parameters
```{python}
if FlagProcessAnalysis :
	Velocity_Left,Velocity_Right = raw_SmoothPurs.ComputeVelocity_andPlot(GazeLE_X, GazeRE_X,GazeLE_Y,GazeRE_Y,EsacLeft,EsacRight)
	Results = raw_SmoothPurs.ComputeParameters(GazeLE_X,GazeRE_X,EsacLeft,EsacRight,AmpSaccLeft,AmpSaccRight,Velocity_Left,Velocity_Right)
else:
	print("  ****************         NO DATA          ****************")
```



## Analysis of EOG signal
```{python}
if (os.path.isfile(FifFileName))  :
	NbBlinks,RMSE_EOG,CorrCoef,Corr_pval,EuclidDist_Norm = raw_SmoothPurs.EOGAnalysis(raw_SmoothPurs.mne_raw)

	NbBlinksPerCycle_EOG = NbBlinks/raw_SmoothPurs.Nb_blocks
	if FlagET:
		Results.update({'NbBlinksPerCycle_EOG':NbBlinksPerCycle_EOG})
		Results.update({'RMSE_EOG':RMSE_EOG})
		Results.update({'Median_RMSE_EOG':np.median(RMSE_EOG)})
		Results.update({'CorrCoef_EOG':CorrCoef})
		Results.update({'Median_CorrCoef_EOG':np.median(CorrCoef)})
		Results.update({'Corr_pval_EOG':Corr_pval})
		Results.update({'EuclidDist_Norm_EOG':EuclidDist_Norm})
		Results.update({'Median_EuclidDist_Norm_EOG':np.median(EuclidDist_Norm)})
	else:
		Results={'NbBlinksPerCycle_EOG':NbBlinksPerCycle_EOG, 'RMSE_EOG':RMSE_EOG,'Median_RMSE_EOG':np.median(RMSE_EOG),'CorrCoef_EOG':CorrCoef,'Median_CorrCoef_EOG':np.median(CorrCoef),'Corr_pval_EOG':Corr_pval,'EuclidDist_Norm_EOG':EuclidDist_Norm,'Median_EuclidDist_Norm_EOG':np.median(EuclidDist_Norm)}
else:
	print("  ****************         NO DATA          ****************")
```



## Parameters

### Root Mean Square Error : $$ \sqrt{\frac{1}{n}\Sigma_{i=1}^{n}{\Big(Gaze_i - Target_i\Big)^2}} $$
```{python}
if FlagProcessAnalysis :
	print("Left Eye: ",Results['Median_RMSE_Left'])
	print("Right Eye : ",Results['Median_RMSE_Right'])
else:
	print("  ****************         NO DATA          ****************")
```

### Number of saccades per cycle :
```{python}
if FlagProcessAnalysis :
	print("Left Eye: ",Results['Median_Nb_Sacc_PerCycle_Left'], "saccades / cycle")
	print("Right Eye : ",Results['Median_Nb_Sacc_PerCycle_Right'], "saccades / cycle")
else:
	print("  ****************         NO DATA          ****************")
```

### Mean amplitude of saccades :
```{python}
if FlagProcessAnalysis :
	print("Left Eye: ",Results['MedianAmpSacc_LeftEye'], "°")
	print("Right Eye : ",Results['MedianAmpSacc_RightEye'],"°")
else:
	print("  ****************         NO DATA          ****************")
```



### Gaze velocity : (target : 15°/s)
```{python}
if FlagProcessAnalysis :
	print("Left Eye: ",Results['MedianVelocity_Left'] , "°/s")
	print("Right Eye : ",Results['MedianVelocity_Right'], "°/s")
else:
	print("  ****************         NO DATA          ****************")
```


### Gain Velocity : 
```{python}
if FlagProcessAnalysis :
	print("Left Eye: ",Results['MedianGainVelocity_Left'] )
	print("Right Eye : ",Results['MedianGainVelocity_Right'])
else:
	print("  ****************         NO DATA          ****************")
```

### Number of blinks per cycle 
```{python}
if (os.path.isfile(FifFileName))  :
	print(Results['NbBlinksPerCycle_EOG'] , " blinks/cycle")
else:
	print("  ****************         NO DATA          ****************")
```


### RMSE on EOG data
```{python}
if (os.path.isfile(FifFileName)):
	print("RMSE : " , Results['Median_RMSE_EOG'])
else:
	print("  ****************         NO DATA          ****************")
```

### Accuracy on EOG data
```{python}
if (os.path.isfile(FifFileName)):
	print("Accuracy : " , np.sum([np.array(Results['Corr_pval_EOG'])<0.05])/len(Results['Corr_pval_EOG']))
else:
	print("  ****************         NO DATA          ****************")
```



```{python}
if  os.path.isfile(FifFileName) :
	# Save results computed from gaze data in a *json file
	if not(os.path.exists(RootDirectory_Results + SUBJECT_NAME)):
		os.mkdir(RootDirectory_Results + SUBJECT_NAME)
	SaveDataFilename = RootDirectory_Results + SUBJECT_NAME + "/" + SUBJECT_NAME + "_SmoothPursuit.json"
	if FlagET:
		raw_SmoothPurs.SaveResults(Results,SaveDataFilename)
		py_tools.append_to_json_file(SaveDataFilename, {'NbBlinksPerCycle_EOG': Results['NbBlinksPerCycle_EOG'],'RMSE_EOG':Results['Median_RMSE_EOG'],'Median_EuclidDist_Norm_EOG':Results['Median_EuclidDist_Norm_EOG'],'CorrCoef_EOG':Results['CorrCoef_EOG'],'Corr_pval_EOG':Results['Corr_pval_EOG']})
	else:
		py_tools.sauvegarder_dictionnaires({'NbBlinksPerCycle_EOG': Results['NbBlinksPerCycle_EOG'],'RMSE_EOG':Results['Median_RMSE_EOG'],'Median_EuclidDist_Norm_EOG':Results['Median_EuclidDist_Norm_EOG'],'CorrCoef_EOG':Results['CorrCoef_EOG'],'Corr_pval_EOG':Results['Corr_pval_EOG']},SaveDataFilename)
	

```

		