---
title: "Analysis of Resting State session"
format:
  html:
    code-fold: true
    page-layout: full
jupyter: python3
---



```{python}
import os 
import glob
import json

RootAnalysisFolder = os.path.split(os.path.split(os.getcwd())[0])[0]
from termcolor import colored
import mne
import matplotlib.pyplot as plt
plt.rcParams['figure.figsize']=(15,8)
plt.rcParams["figure.dpi"] = 300.
import sys
sys.path.append(RootAnalysisFolder)

from AddPyABA_Path import PyABA_path
sys.path.append(PyABA_path)
import gaze_tools,py_tools



from Rest_State_fun import Rest,NumpyEncoder
```


*fif file name definition

```{python}

RootFolder =  os.path.split(RootAnalysisFolder)[0]

RootDirectory_RAW = RootFolder + '/_data/FIF/'
RootDirectory_Results = RootFolder + '/_results/'
FifFileName = RootDirectory_RAW + "***SUJ***/***SUJ***_Rest.raw.fif"

SUBJECT_NAME = os.path.split(os.path.split(FifFileName)[0])[1]
FlagProcessAnalysis = os.path.isfile(FifFileName)


```


Read Raw File

```{python}

# Read fif filename 
if FlagProcessAnalysis :
	raw_Rest = Rest(FifFileName)
else:
	print("  ****************         NO DATA          ****************")		
```

# Compute the rate and amplitude of respiration.
```{python}
if FlagProcessAnalysis :
	RSP_RATE_Mean,RSP_RATE_Std, RSP_Amplitude_Mean, RSP_Amplitude_Std = raw_Rest.RespirationAnalysis(raw_Rest.mne_raw,'Resp')
	Results_Respi = {"RespiRate_Mean" : RSP_RATE_Mean,"RespiRate_Std" : RSP_RATE_Std,"RespiAmplitude_Mean" : RSP_Amplitude_Mean,"RespiAmplitude_Std" : RSP_Amplitude_Std}
else:
	print("  ****************         NO DATA          ****************")		
```


# Compute the spectral 
```{python}
if FlagProcessAnalysis :
	Twin = 10 # s
	DeltaF = 0.25 # Hz
	Epochs,reconst_raw =  raw_Rest.PreprocAndEpoch(raw_Rest.mne_raw, Twin)
	
	# Freq bands of interest
	Freq_Bands = {"delta": [0.0, 4.0], "theta": [4.0, 8.0], "alpha": [8.0, 12.0], "beta": [13.0, 25.0], "gamma": [25.0, 40.0]}
	PowerNorm,psd_Epochs = raw_Rest.Compute_PowerBand(Epochs,Freq_Bands)
else:
	print("  ****************         NO DATA          ****************")		
```


# Compute the connectivity between channels 
```{python}
if FlagProcessAnalysis :
	raw_Rest.Connectivity(Epochs,Freq_Bands)
else:
	print("  ****************         NO DATA          ****************")		
```

# Compute the Phase-amplitude coupling slow (0.5–1.5Hz) and alpha (8–15Hz) bands at each channel.
```{python}
if FlagProcessAnalysis :
	PAC_Chan = raw_Rest.PhaseAmplitudeCoupling(Epochs,[0.5,1.5],[8,15])
else:
	print("  ****************         NO DATA          ****************")		
```

# Compute the spectral caracteritics at each channel.
```{python}
if FlagProcessAnalysis :
	Results_Spec = raw_Rest.SpectralCaracteristics(psd_Epochs)
else:
	print("  ****************         NO DATA          ****************")		
```








# Save results computed from gaze data in a *json file
```{python}
if not(os.path.exists(RootDirectory_Results + SUBJECT_NAME)):
	os.mkdir(RootDirectory_Results + SUBJECT_NAME)
SaveDataFilename = RootDirectory_Results + SUBJECT_NAME + "/" + SUBJECT_NAME + "_Rest.json"
with open(SaveDataFilename, "w") as outfile: 
	   json.dump(json.dumps( {"PowerNorm" : PowerNorm}, cls=NumpyEncoder), outfile)
py_tools.append_to_json_file(SaveDataFilename,json.dumps( {"PAC" : PAC_Chan}, cls=NumpyEncoder))
py_tools.append_to_json_file(SaveDataFilename,json.dumps( {"SpecCaracteristic" : Results_Spec}, cls=NumpyEncoder))
py_tools.append_to_json_file(SaveDataFilename,Results_Respi)

	   
```











